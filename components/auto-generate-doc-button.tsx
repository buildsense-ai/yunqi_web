"use client"

import type React from "react"

import { useState } from "react"
import axios from "axios"
import { FileText } from "lucide-react"
import DocumentDownloadDialog from "./document-download-dialog"
import { useDocuments } from "@/contexts/document-context"

interface AutoGenerateDocButtonProps {
  eventId: number
}

export default function AutoGenerateDocButton({ eventId }: AutoGenerateDocButtonProps) {
  const [isGenerating, setIsGenerating] = useState(false)
  const [showDownloadDialog, setShowDownloadDialog] = useState(false)
  const [docData, setDocData] = useState<{ event_id: number; id: number; doc_url: string } | null>(null)
  const [error, setError] = useState<string | null>(null)
  const { refreshDocuments } = useDocuments()

  const handleGenerateDoc = async (e: React.MouseEvent) => {
    e.stopPropagation()
    if (isGenerating) return

    setIsGenerating(true)
    setError(null)

    try {
      const response = await axios.get(`/api/events/${eventId}/generate-doc`)
      setDocData(response.data)
      setShowDownloadDialog(true)
      // Refresh documents list
      refreshDocuments()
    } catch (err) {
      console.error("Error generating document:", err)
      setError("生成文档失败，请重试")
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <>
      <button
        onClick={handleGenerateDoc}
        disabled={isGenerating}
        className="w-8 h-8 rounded-full bg-green-50 flex items-center justify-center text-green-500 hover:bg-green-100"
        aria-label="自动生成文档"
        title="自动生成文档"
      >
        {isGenerating ? (
          <div className="w-4 h-4 border-2 border-green-500 border-t-transparent rounded-full animate-spin"></div>
        ) : (
          <FileText size={16} />
        )}
      </button>

      <DocumentDownloadDialog
        isOpen={showDownloadDialog}
        onClose={() => setShowDownloadDialog(false)}
        docData={docData}
        error={error}
      />
    </>
  )
}
